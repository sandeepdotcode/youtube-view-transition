---
import { getDataFromYTAPI } from '../utils/getDataFromAPI';
import FeedItem from './FeedItem.astro';
import VidLength from './VidLength.astro';

export interface Props {
  url?: string;
  isChannel?: boolean;
  isList?: boolean;
}

const { url = "home?lang=en", isChannel = false, isList = false } = Astro.props as Props;

const resp = await getDataFromYTAPI(url);
---

<div class:list={["grow h-full grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8 p-8 mt-4",{ "pt-16 overflow-y-auto": !isChannel}]}>
  { !isChannel && !isList &&
    resp.data?.map((item) => {
    switch(item.type) {
      case "video":
        return (
          <FeedItem title={item.title} videoId={item.videoId} thumb={item.type === "video" ? item.thumbnail[0].url : "null"}
            publishTime={item.publishedTimeText} views={item.viewCount}
            channelTitle={item.channelTitle} channelThumb={item.channelThumbnail[0].url}>
            <VidLength isText={true} length={item.lengthText} />
          </FeedItem>
        );
      case "video_listing":
        if (url === "trending?geo=US") return null;
        return item.data?.map((lItem) => (
          <FeedItem title={lItem.title} videoId={lItem.videoId} thumb={lItem.thumbnail[0].url}
            publishTime={lItem.publishedTimeText} views={lItem.viewCount}
            channelTitle={lItem.channelTitle} channelThumb={lItem.channelThumbnail[0].url}>
            <VidLength isText={true} length={lItem.lengthText} />
          </FeedItem>
        ));
      default:
        return null;
    }
  })}
  { isChannel &&
    resp.data?.slice(0, 12).map((item) => (
      <FeedItem title={item.title} videoId={item.videoId} thumb={item.thumbnail[3].url}
        publishTime={item.publishedTimeText} views={item.viewCount} channelTitle={resp.meta?.title}
        channelThumb="nolink" showChannelThumb={false}>
        <VidLength isText={true} length={item.lengthText} />
      </FeedItem>
    ))}
  { isList &&
    resp.data?.map((item) => (
      <FeedItem title={item.title} videoId={item.videoId} thumb={item.thumbnail[3].url}
        publishTime={item.publishedTimeText} views={item.viewCount} channelTitle={item.videoOwnerChannelTitle}
        channelThumb="nolink" showChannelThumb={false}>
        <VidLength isText={true} length={item.lengthText} />
      </FeedItem>
    ))}
</div>

<script define:vars={{resp}}>
  console.log(resp);
</script>